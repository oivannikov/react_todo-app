{"version":3,"sources":["api/api.js","api/user.js","api/todos.js","components/TodoApp/TodoApp.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFooter/TodoFooter.jsx","App.js","index.js"],"names":["BASE_URL","a","fetch","method","body","JSON","stringify","name","username","email","phone","user","json","response","data","result","userId","todos","filterTodosById","filter","todo","sort","curr","next","id","title","deleteTodo","todoId","changeTodoField","value","TodoApp","handleInput","useState","setValue","onSubmit","e","preventDefault","handleSubmit","type","className","placeholder","onChange","target","TodoItem","completed","upDateUserTodos","isEditMode","setEditMode","classNames","checked","then","onKeyDown","keyCode","key","handleCloseEdit","autoFocus","onBlur","onDoubleClick","onClick","handleDeleteItem","TodoList","promiseAll","everyCompleted","every","changeCompleted","some","map","htmlFor","TodoFooter","currentFilter","deleteAllTodos","getCurrentFilter","allCompleted","length","href","selected","deleteTodos","App","setUserId","setTodos","setCurrentFilter","getId","localStorage","getItem","getTodos","todosUpdate","answerFromServer","Promise","all","useEffect","createUser","setItem","addTodo","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d9f4eee.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function createUser() {\n  const user = await fetch(`${BASE_URL}/users/`, {\n    method: 'POST',\n    body: JSON.stringify({\n      name: 'Alex',\n      username: 'Ivannikov',\n      email: 'alexii.ivannikov@gmail.com',\n      phone: '344556677',\n    }),\n  });\n\n  const response = await user.json();\n  const result = await response.data;\n\n  return result;\n}\n\nexport async function getUsers() {\n  const response = await fetch(`${BASE_URL}/users/`);\n  const result = await response.json();\n  const users = await result.data;\n\n  return users;\n}\n","import { BASE_URL } from './api';\n\nexport async function getTodos(userId) {\n  const response = await fetch(`${BASE_URL}/todos/`);\n  const result = await response.json();\n  const todos = await result.data;\n\n  const filterTodosById = todos\n    .filter(todo => todo.userId === +userId)\n    .sort((curr, next) => curr.id - next.id)\n    .filter(todo => todo.title);\n\n  return filterTodosById;\n}\n\nexport function addTodo(title, userId) {\n  return fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      userId,\n      completed: false,\n    }),\n  });\n}\n\nexport function deleteTodo(todoId) {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function changeTodoField(todoId, value, name) {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      [name]: value,\n    }),\n  });\n\n  return response;\n}\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport function TodoApp ({ handleInput}) {\n  const [value, setValue] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleInput(e, value);\n    setValue('');\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  )\n}\n\nTodoApp.propTypes = {\n  handleInput: PropTypes.func.isRequired,\n}\n","import React, { useState } from 'react';\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { deleteTodo } from '../../api/todos';\nimport { changeTodoField } from '../../api/todos';\n\nexport function TodoItem({ title, completed, id, upDateUserTodos }) {\n  const [value, setValue] = useState(title);\n  const [isEditMode, setEditMode] = useState(false);\n\n  function handleCompleted() {\n    if (completed) {\n      changeTodoField(id, false, \"completed\")\n        .then(() => upDateUserTodos());\n\n    } else {\n      changeTodoField(id, true, \"completed\")\n        .then(() => upDateUserTodos());\n    }\n  }\n\n  function handleDeleteItem(id) {\n    deleteTodo(id)\n      .then(() => upDateUserTodos())\n  }\n\n  function handleCloseEdit(e) {\n    if (e.keyCode === 27) {\n      setEditMode(false);\n    }\n\n    if (e.key === 'Enter') {\n      changeTodoField(id, value, \"title\")\n        .then(() => upDateUserTodos());\n      setEditMode(false);\n    }\n  }\n\n  return (\n    <li>\n      <div className={classNames(\"view\", {\"completed\": completed})}>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={handleCompleted}\n        />\n         { !isEditMode\n           ? (\n             <>\n              <label onDoubleClick={() => setEditMode(true)}>\n                { title }\n              </label>\n                <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => handleDeleteItem(id)}\n              />\n            </>\n           )\n           : (\n              <input\n                type=\"text\"\n                className=\"todo__edit\"\n                onChange={(e) => setValue(e.target.value)}\n                onKeyDown={(e) => handleCloseEdit(e)}\n                autoFocus\n                value={value}\n                onBlur={() => setEditMode(false)}\n              />\n            )}\n      </div>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n}\n","import React from 'react';\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { changeTodoField } from '../../api/todos';\n\nexport function TodoList({ todos, upDateUserTodos , promiseAll}) {\n  const everyCompleted = todos.every(todo => todo.completed);\n\n  function flagComplited() {\n    const some = todos.some(todo => !todo.completed);\n    let changeCompleted = [];\n\n    if (some) {\n      changeCompleted = todos\n        .map(todo => changeTodoField(todo.id, true, \"completed\"));\n    } else {\n      changeCompleted = todos\n        .map(todo => changeTodoField(todo.id, false, \"completed\"));\n    }\n    promiseAll(changeCompleted);\n  }\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        checked={everyCompleted}\n        className={classNames(\"toggle-all\")}\n        onChange={flagComplited}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {\n          todos.map(todo => (\n            <TodoItem \n              key={todo.id}\n              {...todo}\n              upDateUserTodos={upDateUserTodos}\n            />\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object),\n  upDateUserTodos: PropTypes.func.isRequired,\n  promiseAll: PropTypes.func.isRequired,\n}\n","import React from 'react';\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { deleteTodo } from '../../api/todos';\n\nexport function TodoFooter({\n    todos,\n    deleteAllTodos,\n    currentFilter,\n    promiseAll,\n    getCurrentFilter\n  }) {\n\n  const allCompleted = todos.filter(todo => todo.completed);;\n\n  function deleteAllTodos() {\n    const deleteTodos = allCompleted.map(todo => deleteTodo(todo.id));\n\n    promiseAll(deleteTodos);\n  }\n\n  return (\n    <>\n      <span className=\"todo-count\">\n        {`${allCompleted.length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: currentFilter === 'all'})}\n            onClick={() => getCurrentFilter(\"all\")}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={classNames({ selected: currentFilter === 'active'})}\n            onClick={() => getCurrentFilter(\"active\")}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={classNames({ selected: currentFilter === 'completed'})}\n            onClick={() => getCurrentFilter(\"completed\")}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {\n        allCompleted.length > 0  &&\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={deleteAllTodos}\n        >\n          Clear completed\n        </button>\n      }\n    </>\n  )\n}\n\nTodoFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired\n  })).isRequired,\n  deleteAllTodos: PropTypes.func.isRequired,\n  promiseAll: PropTypes.func.isRequired,\n  getCurrentFilter: PropTypes.func.isRequired,\n  currentFilter: PropTypes.string.isRequired\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { createUser } from './api/user';\nimport { getTodos, addTodo } from './api/todos';\n\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoFooter } from './components/TodoFooter/TodoFooter';\n\nfunction App() {\n  const [userId, setUserId] = useState(null);\n  const [todos, setTodos] = useState([]);\n  const [currentFilter, setCurrentFilter] = useState('all');\n  const getId = localStorage.getItem('id');\n\n  function upDateUserTodos() {\n    getTodos(userId)\n      .then(todosUpdate => setTodos(todosUpdate));\n  }\n\n  function promiseAll(answerFromServer) {\n    Promise.all(answerFromServer)\n      .then(() => upDateUserTodos());\n  }\n\n  function handleInput(e, value) {\n    e.preventDefault();\n\n    addTodo(value, userId)\n      .then(() => upDateUserTodos());\n  }\n\n  function filteredTodos() {\n    switch (currentFilter) {\n      case 'all': {\n        return todos;\n      }\n\n      case 'active': {\n        return todos.filter(todo => !todo.completed);\n      }\n\n      case 'completed': {\n        return todos.filter(todo => todo.completed);\n      }\n\n      default: {\n        return todos;\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (getId) {\n      setUserId(getId);\n    } else {\n      createUser()\n        .then(({ id }) => {\n          setUserId(id);\n          localStorage.setItem('id', id);\n        });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (userId) {\n      upDateUserTodos();\n    }\n  }, [userId]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoApp\n          handleInput={handleInput}\n        />\n      </header>\n\n      <section className=\"main\">\n        <TodoList\n          todos={filteredTodos()}\n          upDateUserTodos={upDateUserTodos}\n          promiseAll={promiseAll}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <TodoFooter\n          todos={todos}\n          upDateUserTodos={upDateUserTodos}\n          getCurrentFilter={filter => setCurrentFilter(filter)}\n          currentFilter={currentFilter}\n          promiseAll={promiseAll}\n        />\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}