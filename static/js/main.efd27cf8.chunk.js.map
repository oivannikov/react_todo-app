{"version":3,"sources":["api/api.js","api/user.js","api/todos.js","components/TodoApp/TodoApp.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFooter/TodoFooter.jsx","App.js","index.js"],"names":["BASE_URL","a","fetch","method","body","JSON","stringify","name","username","email","phone","user","json","response","data","result","userId","todos","filterTodosById","filter","todo","sort","curr","next","id","title","deleteTodo","todoId","changeCompletedTodo","completed","TodoApp","handleInput","useState","value","setValue","onSubmit","e","preventDefault","handleSubmit","type","className","placeholder","onChange","target","TodoItem","upDateUserTodos","isEditMode","setEditMode","useRef","handleCloseEdit","keyCode","key","changeTitileTodo","then","classNames","checked","chanhgedValue","onKeyDown","autoFocus","onDoubleClick","onClick","handleDeleteItem","TodoList","promiseAll","everyCompleted","every","some","changeCompleted","map","htmlFor","TodoFooter","currentFilter","deleteAllTodos","getCurrentFilter","allCompleted","length","href","selected","deleteTodos","App","setUserId","setTodos","setCurrentFilter","getId","localStorage","getItem","getTodos","todosUpdate","answerFromServer","Promise","all","useEffect","createUser","setItem","addTodo","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efd27cf8.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function createUser() {\n  const user = await fetch(`${BASE_URL}/users/`, {\n    method: 'POST',\n    body: JSON.stringify({\n      name: 'Alex',\n      username: 'Ivannikov',\n      email: 'alexii.ivannikov@gmail.com',\n      phone: '344556677',\n    }),\n  });\n\n  const response = await user.json();\n  const result = await response.data;\n\n  return result;\n}\n\nexport async function getUsers() {\n  const response = await fetch(`${BASE_URL}/users/`);\n  const result = await response.json();\n  const users = await result.data;\n\n  return users;\n}\n\n// export async function getUser(userId) {\n//   const response = await fetch(`${BASE_URL}/users/${userId}`);\n//   const result = await response.json();\n//   const usersId = await result.data;\n\n//   return usersId;\n// }\n","import { BASE_URL } from './api';\n\nexport async function getTodos(userId) {\n  const response = await fetch(`${BASE_URL}/todos/`);\n  const result = await response.json();\n  const todos = await result.data;\n\n  const filterTodosById = todos\n    .filter(todo => todo.userId === +userId)\n    .sort((curr, next) => curr.id - next.id)\n    .filter(todo => todo.title);\n\n  return filterTodosById;\n}\n\nexport function addTodo(title, userId) {\n  return fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      userId,\n      completed: false,\n    }),\n  });\n}\n\nexport function deleteTodo(todoId) {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function changeCompletedTodo(todoId, completed) {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      completed,\n    }),\n  });\n\n  return response;\n}\n\nexport async function changeTitileTodo(todoId, title) {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      title,\n    }),\n  });\n\n  return response;\n}\n\n// придумать как сделать один запрос и не создавать два практических одинаковых\n","import React, { useState } from 'react';\n\nexport function TodoApp ({ handleInput}) {\n  const [value, setValue] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleInput(e, value);\n    setValue('');\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  )\n}\n","import React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { deleteTodo } from '../../api/todos';\nimport { changeCompletedTodo, changeTitileTodo } from '../../api/todos';\n\nexport function TodoItem({ title, completed, id, upDateUserTodos }) {\n\n  const [value, setValue] = useState(title);\n  const [isEditMode, setEditMode] = useState(false);\n  const inputRef = useRef(null);\n\n  const editTodo = () => {\n    setEditMode(true);\n  }\n\n  function handleCompleted() {\n    if (completed) {\n      changeCompletedTodo(id, false)\n        .then(() => upDateUserTodos());\n\n    } else {\n      changeCompletedTodo(id, true)\n        .then(() => upDateUserTodos());\n    }\n  }\n\n  function handleDeleteItem(id) {\n    deleteTodo(id)\n      .then(() => upDateUserTodos())\n  }\n\n  function handleCloseEdit(e) {\n    if (e.keyCode === 27) {\n      setEditMode(false);\n    }\n\n    if (e.key === 'Enter') {\n      changeTitileTodo(id, value)\n        .then(() => upDateUserTodos());\n      setEditMode(false);\n    }\n  }\n\n  function handleChangeTodo(chanhgedValue) {\n    setValue(chanhgedValue);\n  }\n  \n\n  return (\n    <li>\n      <div className={classNames(\"view\", {\"completed\": completed})}>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={handleCompleted}\n        />\n         { !isEditMode\n           ? (\n             <>\n              <label onDoubleClick={() => editTodo()}>\n                { title }\n              </label>\n                <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => handleDeleteItem(id)}\n              />\n            </>\n           )\n           : (\n              <input\n                type=\"text\"\n                className=\"todo__edit\"\n                onChange={(e) => handleChangeTodo(e.target.value)}\n                onKeyDown={(e) => handleCloseEdit(e)}\n                autoFocus\n                value={value}\n              />\n            )}\n      </div>\n    </li>\n  );\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { changeCompletedTodo } from '../../api/todos';\n\nexport function TodoList({ todos, upDateUserTodos , promiseAll}) {\n  const everyCompleted = todos.every(todo => todo.completed);\n\n  function flagComplited() {\n    const some = todos.some(todo => !todo.completed);\n\n    if (some) {\n      const changeCompleted = todos\n        .map(todo => changeCompletedTodo(todo.id, true));\n      promiseAll(changeCompleted);\n    } else {\n      const changeCompleted = todos\n        .map(todo => changeCompletedTodo(todo.id, false));\n      promiseAll(changeCompleted);\n    }\n\n    // подумать как упростить это код когда буду сдавать,\n    // здесь можно много что повыносить так как код такой же\n    // только true false разные\n  }\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        checked={everyCompleted}\n        className={classNames(\"toggle-all\")}\n        onChange={flagComplited}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {\n          todos.map(todo => (\n            <TodoItem \n              key={todo.id}\n              {...todo}\n              upDateUserTodos={upDateUserTodos}\n            />\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { deleteTodo } from '../../api/todos';\n\nexport function TodoFooter({\n    todos,\n    deleteAllTodos,\n    currentFilter,\n    promiseAll,\n    getCurrentFilter\n  }) {\n  const allCompleted = todos.filter(todo => todo.completed);;\n\n  function deleteAllTodos() {\n    const deleteTodos = allCompleted.map(todo => deleteTodo(todo.id));\n\n    promiseAll(deleteTodos);\n  }\n  return (\n    <>\n      <span className=\"todo-count\">\n        {`${allCompleted.length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: currentFilter === 'all'})}\n            onClick={() => getCurrentFilter(\"all\")}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={classNames({ selected: currentFilter === 'active'})}\n            onClick={() => getCurrentFilter(\"active\")}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={classNames({ selected: currentFilter === 'completed'})}\n            onClick={() => getCurrentFilter(\"completed\")}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {\n        allCompleted.length > 0  &&\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={deleteAllTodos}\n        >\n          Clear completed\n        </button>\n      }\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { createUser } from './api/user';\nimport { getTodos, addTodo } from './api/todos';\n\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoFooter } from './components/TodoFooter/TodoFooter';\n\nfunction App() {\n  const [userId, setUserId] = useState(null);\n  const [todos, setTodos] = useState([]);\n  // const [user, setUser] = useState(null);\n  const [currentFilter, setCurrentFilter] = useState('all');\n  const getId = localStorage.getItem('id');\n  // const [allCompleted, setAllCompleted] = useState(false);\n\n  function upDateUserTodos() {\n    getTodos(userId)\n      .then(todosUpdate => setTodos(todosUpdate));\n  }\n\n  function promiseAll(answerFromServer) {\n    Promise.all(answerFromServer)\n      .then(() => upDateUserTodos());\n  }\n\n  function handleInput(e, value) {\n    e.preventDefault();\n\n    addTodo(value, userId)\n      .then(() => upDateUserTodos());\n  }\n\n  function filteredTodos() {\n    switch (currentFilter) {\n      case 'all': {\n        return todos;\n      }\n\n      case 'active': {\n        return todos.filter(todo => !todo.completed);\n      }\n\n      case 'completed': {\n        return todos.filter(todo => todo.completed);\n      }\n\n      default: {\n        return todos;\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (getId) {\n      setUserId(getId);\n    } else {\n      createUser()\n        .then(({ id }) => {\n          setUserId(id);\n          localStorage.setItem('id', id);\n        });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (userId) {\n      // getUser(userId)\n      //   .then(user => setUser(user));\n      upDateUserTodos();\n    }\n  }, [userId]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoApp\n          handleInput={handleInput}\n        />\n      </header>\n\n      <section className=\"main\">\n        <TodoList\n          todos={filteredTodos()}\n          upDateUserTodos={upDateUserTodos}\n          promiseAll={promiseAll}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <TodoFooter\n          todos={todos}\n          upDateUserTodos={upDateUserTodos}\n          getCurrentFilter={filter => setCurrentFilter(filter)}\n          currentFilter={currentFilter}\n          promiseAll={promiseAll}\n        />\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}