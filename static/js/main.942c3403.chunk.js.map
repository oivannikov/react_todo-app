{"version":3,"sources":["api/api.js","api/user.js","api/todos.js","components/TodoApp/TodoApp.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFooter/TodoFooter.jsx","App.js","index.js"],"names":["BASE_URL","a","fetch","method","body","JSON","stringify","name","username","email","phone","user","json","response","data","result","userId","todos","filterTodosById","filter","todo","sort","curr","next","id","deleteTodo","todoId","changeCompletedTodo","completed","TodoApp","handleInput","useState","value","setValue","onSubmit","e","preventDefault","handleSubmit","type","className","placeholder","onChange","target","TodoItem","title","upDateUserTodos","isEditMode","setEditMode","useRef","classNames","checked","then","onDoubleClick","console","log","onClick","handleDeleteItem","TodoList","promiseAll","everyCompleted","every","some","changeCompleted","map","htmlFor","key","TodoFooter","currentFilter","deleteAllTodos","getCurrentFilter","allCompleted","length","href","selected","deleteTodos","App","setUserId","setTodos","setCurrentFilter","getId","localStorage","getItem","getTodos","todosUpdate","answerFromServer","Promise","all","useEffect","createUser","setItem","addTodo","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.942c3403.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function createUser() {\n  const user = await fetch(`${BASE_URL}/users/`, {\n    method: 'POST',\n    body: JSON.stringify({\n      name: 'Alex',\n      username: 'Ivannikov',\n      email: 'alexii.ivannikov@gmail.com',\n      phone: '344556677',\n    }),\n  });\n\n  const response = await user.json();\n  const result = await response.data;\n\n  return result;\n}\n\nexport async function getUsers() {\n  const response = await fetch(`${BASE_URL}/users/`);\n  const result = await response.json();\n  const users = await result.data;\n\n  return users;\n}\n\n// export async function getUser(userId) {\n//   const response = await fetch(`${BASE_URL}/users/${userId}`);\n//   const result = await response.json();\n//   const usersId = await result.data;\n\n//   return usersId;\n// }\n","import { BASE_URL } from './api';\n\nexport async function getTodos(userId) {\n  const response = await fetch(`${BASE_URL}/todos/`);\n  const result = await response.json();\n  const todos = await result.data;\n\n  const filterTodosById = todos\n    .filter(todo => todo.userId === +userId)\n    .sort((curr, next) => curr.id - next.id);\n\n  return filterTodosById;\n}\n\nexport function addTodo(title, userId) {\n  return fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      userId,\n      completed: false,\n    }),\n  });\n}\n\nexport function deleteTodo(todoId) {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function changeCompletedTodo(todoId, completed) {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      completed,\n    }),\n  });\n\n  return response;\n}\n","import React, { useState } from 'react';\n\nexport function TodoApp ({ handleInput}) {\n  const [value, setValue] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleInput(e, value);\n    setValue('');\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  )\n}\n","import React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { deleteTodo } from '../../api/todos';\nimport { changeCompletedTodo } from '../../api/todos';\n\nexport function TodoItem({ title, completed, id, upDateUserTodos }) {\n\n  const [value, setValue] = useState('');\n  const [isEditMode, setEditMode] = useState(true);\n  const inputRef = useRef(null);\n\n  const editTodo = () => {\n    setEditMode(!isEditMode);\n\n    console.log(isEditMode);\n  }\n\n  function handleCompleted() {\n    if (completed) {\n      changeCompletedTodo(id, false)\n        .then(() => upDateUserTodos());\n\n    } else {\n      changeCompletedTodo(id, true)\n        .then(() => upDateUserTodos());\n    }\n  }\n\n  function handleDeleteItem(id) {\n    deleteTodo(id)\n      .then(() => upDateUserTodos())\n  }\n\n  return (\n    <li>\n      <div\n        className={classNames(\"view\", {\"completed\": completed})}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={handleCompleted}\n        />\n        <label\n            onDoubleClick={() => editTodo()}\n        >\n          { title }\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleDeleteItem(id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n      />\n    </li>\n  );\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { changeCompletedTodo } from '../../api/todos';\n\nexport function TodoList({ todos, upDateUserTodos , promiseAll}) {\n  const everyCompleted = todos.every(todo => todo.completed);\n\n  function flagComplited() {\n    const some = todos.some(todo => !todo.completed);\n\n    if (some) {\n      const changeCompleted = todos\n        .map(todo => changeCompletedTodo(todo.id, true));\n      promiseAll(changeCompleted);\n    } else {\n      const changeCompleted = todos\n        .map(todo => changeCompletedTodo(todo.id, false));\n      promiseAll(changeCompleted);\n    }\n\n    // подумать как упростить это код когда буду сдавать,\n    // здесь можно много что повыносить так как код такой же\n    // только true false разные\n  }\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        checked={everyCompleted}\n        className={classNames(\"toggle-all\")}\n        onChange={flagComplited}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {\n          todos.map(todo => (\n            <TodoItem \n              key={todo.id}\n              {...todo}\n              upDateUserTodos={upDateUserTodos}\n            />\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { deleteTodo } from '../../api/todos';\n\nexport function TodoFooter({\n    todos,\n    deleteAllTodos,\n    currentFilter,\n    promiseAll,\n    getCurrentFilter\n  }) {\n  const allCompleted = todos.filter(todo => todo.completed);;\n\n  function deleteAllTodos() {\n    const deleteTodos = allCompleted.map(todo => deleteTodo(todo.id));\n\n    promiseAll(deleteTodos);\n  }\n  return (\n    <>\n      <span className=\"todo-count\">\n        {`${allCompleted.length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: currentFilter === 'all'})}\n            onClick={() => getCurrentFilter(\"all\")}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={classNames({ selected: currentFilter === 'active'})}\n            onClick={() => getCurrentFilter(\"active\")}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={classNames({ selected: currentFilter === 'completed'})}\n            onClick={() => getCurrentFilter(\"completed\")}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {\n        allCompleted.length > 0  &&\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={deleteAllTodos}\n        >\n          Clear completed\n        </button>\n      }\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { createUser } from './api/user';\nimport { getTodos, addTodo } from './api/todos';\n\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoFooter } from './components/TodoFooter/TodoFooter';\n\nfunction App() {\n  const [userId, setUserId] = useState(null);\n  const [todos, setTodos] = useState([]);\n  // const [user, setUser] = useState(null);\n  const [currentFilter, setCurrentFilter] = useState('all');\n  const getId = localStorage.getItem('id');\n  // const [allCompleted, setAllCompleted] = useState(false);\n\n  function upDateUserTodos() {\n    getTodos(userId)\n      .then(todosUpdate => setTodos(todosUpdate));\n  }\n\n  function promiseAll(answerFromServer) {\n    Promise.all(answerFromServer)\n      .then(() => upDateUserTodos());\n  }\n\n  function handleInput(e, value) {\n    e.preventDefault();\n\n    addTodo(value, userId)\n      .then(() => upDateUserTodos());\n  }\n\n  function filteredTodos() {\n    switch (currentFilter) {\n      case 'all': {\n        return todos;\n      }\n\n      case 'active': {\n        return todos.filter(todo => !todo.completed);\n      }\n\n      case 'completed': {\n        return todos.filter(todo => todo.completed);\n      }\n\n      default: {\n        return todos;\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (getId) {\n      setUserId(getId);\n    } else {\n      createUser()\n        .then(({ id }) => {\n          setUserId(id);\n          localStorage.setItem('id', id);\n        });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (userId) {\n      // getUser(userId)\n      //   .then(user => setUser(user));\n      upDateUserTodos();\n    }\n  }, [userId]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoApp\n          handleInput={handleInput}\n        />\n      </header>\n\n      <section className=\"main\">\n        <TodoList\n          todos={filteredTodos()}\n          upDateUserTodos={upDateUserTodos}\n          promiseAll={promiseAll}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <TodoFooter\n          todos={todos}\n          upDateUserTodos={upDateUserTodos}\n          getCurrentFilter={filter => setCurrentFilter(filter)}\n          currentFilter={currentFilter}\n          promiseAll={promiseAll}\n        />\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}